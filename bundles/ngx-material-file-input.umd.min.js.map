{"version":3,"sources":["ng://ngx-material-file-input/lib/model/file-input-config.model.ts","ng://ngx-material-file-input/lib/model/file-input.model.ts","ng://ngx-material-file-input/lib/file-input/file-input.component.ts","ng://ngx-material-file-input/lib/pipe/byte-format.pipe.ts","ng://ngx-material-file-input/lib/material-file-input.module.ts","ng://ngx-material-file-input/lib/validator/file-validator.ts"],"names":["NGX_MAT_FILE_INPUT_CONFIG","InjectionToken","FileInputConfig","FileInput","_files","delimiter","this","_fileNames","map","f","name","join","Object","defineProperty","prototype","FileInputComponent","ngControl","fm","_elementRef","_renderer","_this","Subject","nextId","_","valueAccessor","monitor","nativeElement","subscribe","origin","focused","stateChanges","next","setDescribedByIds","ids","describedBy","empty","value","fileInput","writeValue","files","_placeholder","plh","length","valuePlaceholder","undefined","_required","req","coerceBooleanProperty","disabled","dis","setDisabledState","errors","touched","onContainerClick","event","tagName","toLowerCase","querySelector","focus","open","obj","setProperty","registerOnChange","fn","_onChange","registerOnTouched","_onTouched","change","fileList","target","fileArray","i","push","blur","isDisabled","ngOnInit","multiple","click","fileNames","ngOnDestroy","complete","stopMonitoring","Component","args","selector","template","styles","providers","provide","MatFormFieldControl","useExisting","NgControl","decorators","type","Optional","Self","FocusMonitor","ElementRef","Renderer2","Input","HostBinding","HostListener","ByteFormatPipe","config","unit","sizeUnit","transform","parseInt","formatBytes","bytes","decimals","B","charAt","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","Pipe","Inject","MaterialFileInputModule","NgModule","declarations","exports","FileValidator","maxContentSize","control","size","reduce","acc","actualSize","maxSize"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\n * Optional token to provide custom configuration to the module\n */\nexport const NGX_MAT_FILE_INPUT_CONFIG = new InjectionToken<FileInputConfig>(\n  'ngx-mat-file-input.config'\n);\n\n/**\n * Provide additional configuration to dynamically customize the module injection\n */\nexport class FileInputConfig {\n  /**\n   * Unit used with the ByteFormatPipe, default value is *Byte*.\n   * The first letter is used for the short notation.\n   */\n  sizeUnit: string;\n}\n","/**\n * The files to be uploaded\n */\nexport class FileInput {\n  private _fileNames: string;\n\n  constructor(private _files: File[], private delimiter: string = ', ') {\n    this._fileNames = this._files.map((f: File) => f.name).join(delimiter);\n  }\n\n  get files() {\n    return this._files || [];\n  }\n\n  get fileNames(): string {\n    return this._fileNames;\n  }\n}\n","import { Component, OnInit, Input, ElementRef, OnDestroy, HostBinding, Renderer2, HostListener, Optional, Self } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\n\nimport { FileInput } from '../model/file-input.model';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-mat-file-input',\n  template: `<input #input id=\"md-input-file\" type=\"file\" [attr.multiple]=\"multiple? '' : null\">\n<span class=\"filename\">{{ fileNames }}</span>\n`,\n  styles: [`:host{display:inline-block}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block}`],\n  providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent }]\n})\nexport class FileInputComponent implements MatFormFieldControl<FileInput>, ControlValueAccessor, OnInit, OnDestroy {\n  static nextId = 0;\n\n  stateChanges = new Subject<void>();\n  focused = false;\n  controlType = 'file-input';\n\n  @Input() autofilled: boolean = false;\n\n  private _placeholder: string;\n  private _required = false;\n\n  @Input() valuePlaceholder: string;\n  @Input() multiple: boolean;\n\n  @HostBinding() id = `ngx-mat-file-input-${FileInputComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby') describedBy = '';\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  @Input()\n  get value(): FileInput | null {\n    return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);\n  }\n  set value(fileInput: FileInput | null) {\n    if (fileInput) {\n      this.writeValue(fileInput.files);\n      this.stateChanges.next();\n    }\n  }\n\n  @Input()\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  get empty() {\n    return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;\n  }\n\n  @HostBinding('class.mat-form-field-should-float')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty || this.valuePlaceholder !== undefined;\n  }\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n  set required(req: boolean) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  @HostBinding('class.file-input-disabled')\n  get isDisabled() {\n    return this.disabled;\n  }\n  @Input()\n  get disabled() {\n    return this._elementRef.nativeElement.disabled;\n  }\n  set disabled(dis: boolean) {\n    this.setDisabledState(coerceBooleanProperty(dis));\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get errorState() {\n    return this.ngControl.errors !== null && this.ngControl.touched;\n  }\n\n  onContainerClick(event: MouseEvent) {\n    if ((event.target as Element).tagName.toLowerCase() !== 'input' && !this.disabled) {\n      this._elementRef.nativeElement.querySelector('input').focus();\n      this.focused = true;\n      this.open();\n    }\n  }\n\n  /**\n   * @see https://angular.io/api/forms/ControlValueAccessor\n   */\n  constructor(\n    @Optional()\n    @Self()\n    public ngControl: NgControl,\n    private fm: FocusMonitor,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  writeValue(obj: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj);\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  @HostListener('change', ['$event'])\n  change(event: any) {\n    const fileList = event.target.files;\n    const fileArray = [];\n    if (fileList) {\n      for (let i = 0; i < fileList.length; i++) {\n        fileArray.push(fileList[i]);\n      }\n    }\n    this.value = new FileInput(fileArray);\n    this._onChange(this.value);\n  }\n\n  @HostListener('focusout')\n  blur() {\n    this.focused = false;\n    this._onTouched();\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  ngOnInit() {\n    this.multiple = coerceBooleanProperty(this.multiple);\n  }\n\n  open() {\n    if (!this.disabled) {\n      this._elementRef.nativeElement.querySelector('input').click();\n    }\n  }\n\n  get fileNames() {\n    return this.value ? this.value.fileNames : this.valuePlaceholder;\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","import { Pipe, PipeTransform, Optional, Inject } from '@angular/core';\nimport {\n  FileInputConfig,\n  NGX_MAT_FILE_INPUT_CONFIG\n} from '../model/file-input-config.model';\n\n@Pipe({\n  name: 'byteFormat'\n})\nexport class ByteFormatPipe implements PipeTransform {\n  private unit: string;\n\n  constructor(\n    @Optional()\n    @Inject(NGX_MAT_FILE_INPUT_CONFIG)\n    private config: FileInputConfig\n  ) {\n    this.unit = config ? config.sizeUnit : 'Byte';\n  }\n\n  transform(value: any, args?: any): any {\n    if (parseInt(value, 10) >= 0) {\n      value = this.formatBytes(+value, +args);\n    }\n    return value;\n  }\n\n  private formatBytes(bytes: number, decimals?: number) {\n    if (bytes === 0) {\n      return '0 ' + this.unit;\n    }\n    const B = this.unit.charAt(0);\n    const k = 1024;\n    const dm = decimals || 2;\n    const sizes = [\n      this.unit,\n      'K' + B,\n      'M' + B,\n      'G' + B,\n      'T' + B,\n      'P' + B,\n      'E' + B,\n      'Z' + B,\n      'Y' + B\n    ];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { FileInputComponent } from './file-input/file-input.component';\nimport { ByteFormatPipe } from './pipe/byte-format.pipe';\nimport { FileInputConfig } from './model/file-input-config.model';\n\n@NgModule({\n  declarations: [FileInputComponent, ByteFormatPipe],\n  providers: [FocusMonitor],\n  exports: [FileInputComponent, ByteFormatPipe]\n})\nexport class MaterialFileInputModule {}\n","import { ValidatorFn, AbstractControl } from '@angular/forms';\nimport { FileInput } from '../model/file-input.model';\n\nexport namespace FileValidator {\n\n    /**\n     * Function to control content of files\n     *\n     * @param bytes max number of bytes allowed\n     *\n     * @returns\n     */\n    export function maxContentSize(bytes: number): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any } => {\n            const size = control && control.value ? (control.value as FileInput).files.map(f => f.size).reduce((acc, i) => acc + i, 0) : 0;\n            const condition = bytes >= size;\n            return condition ? null : {\n                maxContentSize: {\n                    actualSize: size,\n                    maxSize: bytes\n                }\n            };\n        }\n    }\n}\n"]}